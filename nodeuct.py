from plateau import Plateau
import copy

class nodeUCT:

    """
    classe d'arbre pour l'exécution d'un algorithme UCT
    """

    def __init__(self,etat):
        self.etat=etat
        self.parent=None
        self.children=[]
        self.c=0 #nombre de fois où le joueur a choisi cette action
        self.valeur=0.0
        self.action=0

    def select_action(self,etat,n_t,mu_t,t,facteur):

        f=facteur #facteur permettant de moduler
        ls=[]
        n=len(mu_t)

        for i in range(0,n_t):
            if(n_t[i]==0):
                ls.append(0)
            else:
                ls.append(mu_t[i]+f*math.sqrt(2*math.log(t)/n_t[i]))

        return ls.index(max(ls))
        #!!! je sais pas encore si je dois mettre la selection dans la classe joueur


    def explore(self,fils):
        """
        création d'un noeud fils à partir de l'etat actuel
        """
        self.children.append(fils)


    def simulation(self):
        #



    def update_ponderation(self,tab_victoire,tab_simulation_etat_actuel):
        #je crois qu'il faut retrogpropager avec cette fonction
        #p=
        #return p

    def afficher_arbre(self):

    def est_feuille(self):
        if len(self.children)==0:
            return 1
        else:
            return 0
